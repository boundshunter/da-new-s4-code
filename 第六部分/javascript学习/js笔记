
Javascript:
    独立的语言，浏览器具有js的解释器
    JavaScript代码的存在形式：
        - Head中
            第一种写法，引入
            <script src="common.js"></script>

            第二中写法，声明为javascript，type="text/javascript" 不写也可以，默认就是它

            <script type="text/javascript">
                alert(123);
            </script>
            默认
            <script>
                alert(123);
            </script>


    变量：
        python
            name = ’alex'

        javascript
            name = 'alex'     # 默认为全局变量
            var name = 'eric' # 局部变量
            javascript 默认都写 var name ，如果真需要全局变量，在改，默认就都写var

            function func(){

                var age = '18'  # 局部变量

                gender = 'M' # 全局变量
            }

        数字转换
            age = "18"
            i = parseInt(age) # 字符串转换成数字
                parseFloat(age) # 字符串转换成浮点数

        写javascript代码
                    1、可以在文件中
                    2、临时的可以在浏览器的终端 console中写。


基本数据类型
    数字
        a=18
    字符串
        a='alex'
        a.charAt(索引位置)
        a.substring(起始位置，结束位置)
        a.length(obj) 字符串长度


    定时器
        setInterval("f1()",2000) # 参数：执行的代码，间隔时间
        console.log(l) 在console窗口打印


    列表数组
    obj.length          数组的大小

    obj.push(ele)       尾部追加元素
    obj.pop()           尾部获取一个元素
    obj.unshift(ele)    头部插入元素
    obj.shift()         头部移除元素
    可以进行获取，删除，修改值操作
    obj.splice(start, deleteCount, value, ...)  插入、删除或替换数组的元素
                        obj.splice(n,0,val) 指定位置插入元素
                        obj.splice(n,1,val) 指定位置替换元素
                        obj.splice(n,1)     指定位置删除元素
    obj.slice( )        切片
    obj.reverse( )      反转
    obj.join(sep)       将数组元素连接起来以构建一个字符串
    obj.concat(val,..)  连接数组
    obj.sort( )         对数组元素进行排序



for 循环
    1、第一种循环，循环的是列表的索引，字典的key
        a = [11,33,22,44,55,66]
        for (item in a){
        console.log(item);
        }
        a = {'k1':'v1','k2':'v2'}
        for (item in a){
        console.log(item);
        }
        列表，循环的是索引值
        字典，循环的是k值
        列表和字典 获取值，a[item]
        for (item in a){
        console.log(a[item]);
        }
    2、第二种循环 ，此种循环不可应用于字典，因为字典是无序的
        for (var i=0;i<10;i++){
        }
        循环数组
        a = [11,33,22,44,55,66]
        for (var i=0;i<a.length;i++){console.log(a[i])}

条件 if
    if(条件){
    }else if(条件){
    }else{
    }

    if(1==1) 判断值相等
    if(1!=1)
    if(1===1) 判断值和类型都相等
    ==   值相等
    ===  值和类型都相等
    &&   and
    ||   or

函数
    function 函数名(a,bc,c){}
    调用
        函数名(1,2,3) # 形式参数


Dom  Document
    1、直接找
        document.getElementById('i1')
        document.getElementsTagName('a')
        document.getElementsTagName('c1')
    2、间接找
        tag = document.getElementById('i1')

        parentNode          // 父节点
        childNodes          // 所有子节点
        firstChild          // 第一个子节点
        lastChild           // 最后一个子节点
        nextSibling         // 下一个兄弟节点
        previousSibling     // 上一个兄弟节点

        parentElement           // 父节点标签元素
        children                // 所有子标签
        firstElementChild       // 第一个子标签元素
        lastElementChild        // 最后一个子标签元素
        nextElementtSibling     // 下一个兄弟标签元素
        previousElementSibling  // 上一个兄弟标签元素


    操作标签
        a. innerText (textContent)
            获取标签中文本呢哦让
                标签.innerText

            对标签文本内容重新赋值
                标签.innerText='新值'

        b. className
           tag.className   直接整体做操作

           tag.classList.add('样式名c几') 添加制定的样式
           tag.classList.remove('样式名'） 删除制定样式

        c. checkbox
                checkbox对象.checked 获得值
                checkbox.checked=true 设置值为true 选择
                checkbox.checked=false 设置值为false 不选择



函数
    普通函数
        function func(arg){}
        func(1)
    匿名函数
        setinterval('函数'，间隔时间毫秒数）
    自执行函数：
        arg 形参   最外层的 (1) 实参
        (function func(arg){
            console.log('111');
        })(1)

        自执行函数的出现，是为了防止多种外部函数重名，让函数自动执行结果，而不是需要手动去执行
        自执行，相当于，定义一个函数，然后执行这个函数

序列化
    JSON.stringify(obj)    将对象类型转换为字符串  序列化
    JSON.parse(str)        将字符串转换为对象类型  反序列化

转义
    客户端（cookie)   -->    服务器端
    将数据经过转以后，保存在cookie

eval
    python:
        val = eval(算数表达式) 默认有返回值  eval 不可以执行代码
        exec(执行代码) 没有返回值，但是可以执行

    JavaScript 中
        eval既可以执行算数表达式，又可以执行代码，还有返回值

时间
    Date 相当于一个类
    var d = new Date() 通过new 一个 Date() 类，相当于创建一个对象
    d就是时间对象，d就封装了当前时间
    d.getxxxx 获取
    d.setxxxx 设置



******************************
作用域： 重中之重！！！！！！！！！！！！！！！！

JavarScript 中
    1、以函数为作用域，和python相同，除let
    2、函数的作用域，在函数为被调用之前已经创建
    3、函数的作用域存在作用域链，并且也是在被调用之前创建（函数里面套函数=作用域套作用域，我们称之为作用域链）
        xo='alex'
        function func(){
            var xo='eric'
            func inner(){

                console.log(xo)
            }
        }
        var ret = func()
        ret
        作用域调用顺序，用内到外
    4、函数内局部变量提前声明
    function func(){
        var xxoo='alex';
    }
    func()
    //程序直接报错

    函数内局部变量声明 意思是，我会提前声明一个 var xxoo，但是这时候并未赋值，此时xxoo为undefined
    函数内顺序执行，当执行到console.log时，此时并未赋值，所以返回undefined,
    然后在执行var xxoo='alex'给xxoo赋值
    function func(){
        console.log(xxoo);
        var xxoo='alex';
    }
    func()
    // 所以输出结果undefined

面向对象
    function Foo(n){
        this.name=n;
    }
    var obj = new Foo('abc')
    obj.name //返回 abc
    this 相当于self
    生成对象，使用new 函数名(参数)

    原型：
        function Foo(n){
            this.name=n;
        }
        # Foo 原型
        Foo.prototype = {
            'sayName':function(){
                console.log(this.name)
            }
        }

        obj1 = new Foo('aaa')
        obj2 = new F00('bbb')

        obj1 = new Foo('aaa')
        obj1.sayName

        原型的作用是防止重复调用时在内存中重复申请内存空间造成浪费
                            解析：
                            1,生成obj1对象，传入参数 aaa，此时,obj1只有一个属性obj1.name
                            2,当调用obj1.sayName时，先去Foo.prototype中，找是否有sayName属性，如果有
                                  则执行他下面的函数，console.log(obj1.name)


DOM
    document object model

    直接获取
        document.getElementById(xxx)
    间接获取
        innerText 只获取当前文本，如果里面有套用标签，也不现实标签，只显示文本内容
        innerHtml 获取全部内容，包括获取内部标签和文本
        value
            input  -value 获取当前标签中的值
            select 获取选中的value值（selectedIndex)
            textarea

    操作
        className
        classList
            classList.add
            classList.remove


        <div id='i1' style='font-size:16px'>
        obj = document.getElementById('i1')
        obj.style.fontSize='16px'  就相当于style='font-size:16px' ，font-size 中间的-去掉，size第一个字母边大写，一般都是这个规则
        obj.style.color = 'lightgray'
        obj.backgroundColor = 'black'

        属性操作
        attributes 获取所有属性
        setAttribute   设置属性
        removeAttribute   移除属性

        obj.setAttribute('value','alex') 相当于
            <div id='i1' style='font-size:16px' value='alex'>

         obj.removeAttribute('value') 删除value属性


        ------------------------------------------------
        创建标签方式
            字符串创建
                tag = "<p><input type='text'/></p>";
                document.getElementById('i1').insertAdjacentHTML('beforeEnd',tag)

            对象创建
                tag = document.createElement('input');
                tag.setAttribute('type','text');
                tag.style.fontSize = '16px';
                标签嵌套
                var p = document.createElement('p');
                input标签放入p标签中
                p.appendChild(tag);
                最后将标签添加到id为 i1的标签中
                document.getElementById('i1').appendChild(p);