for index1,key1 in enumerate(menu.keys(),1):  #字典排序，从数字1开始而不是从0开始
    print(index1,key1)


#将字典初始化入文件的方法
user_info_dict = {
    'jfsu':{
        'password':'abc123!',
        'salary':30000,
        'buying_list':[]
    },
    'mmm':{
        'password':'123123',
        'salary':50000,
        'buying_list':[]
    }
}

with open('user_info_list.txt','w',encoding="utf-8") as f_init:
    f_init.write(str(user_info_dict))


#高亮变色
\033[31;1m    \033[0m" 字体高亮

40之后背景高亮

#更新数值写入字典
with open('user_info_list.txt','w') as f:
    user_info_dict[user_login]['buying_list'] = this_buy  # 用户已购买列表
    user_info_dict[user_login]['salary'] = balance   # 用户余额

    f.write(str(user_info_dict)) #将新值写入 文件，但是此种方法每次都会清空文件，重新将全部内容写入文件，非单纯更新，需要换方法

#判断金额是否足够，商品增加到购买列表
if balance >= shopping_item[1]:  # 判断金额是否足够
    balance = balance - shopping_item[1]    # 金额足够则在原有基础上减去商品金额
    product_name = shopping_item[0]  # 定义购买商品信息

    this_buy.append(product_name)  # 定义本次购买商品信息

#定义文件路径
BASE_DIR = os.path.dirname(__file__)  # __file__python定义好的变量
DB_DIR = os.path.join(BASE_DIR,'db')

#写入文件
def alter_staff_info(username,salary): # 修改员工姓名函数
    info[username] = salary
    with open(DB_DIR,'w',encoding='utf-8') as f_alter:
        f_alter.write(str(info))
    print("修改成功")
错题集:数据写回文件时，由于要求写入str 没格式化str，造成文件置空，还需要重新初始化一份文件

#判断输入的参数个数是否正确
#判断参数是否为2， 然后把参数值传递给username和salary，在调用函数写入文件
count = input("请输入要修改的员工姓名和工资，用空格分隔(例如：Alex 10) : ").split()
if count == 2:
    username = count[0]
    salary = count[1]
    if username not in info:  # 判断用户是否存在 用户不存在 则增加用户和工资信息写入文件
        add_staff_info(username,salary)
        login()