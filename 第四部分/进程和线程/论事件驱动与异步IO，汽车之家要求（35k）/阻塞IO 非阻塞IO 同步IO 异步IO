IO多路复用和异步IO的区别

异步I/O 说明：



阻塞IO，非阻塞IO，多路复用IO都属于同步IO  # 卡主

阻塞IO，单线程，阻塞模式，无法操作多个IO  # 返回错误
        单线程，用户发起请求，没有数据返回，等待数据卡住了，后面就都要等待前面的用户接收数据
        用户数据接收完成，然后需要内核将数据拷贝到用户内存，然后用户才能收到数据，这个过程完成后
        其他用户发起请求才能继续执行，重复这个过程，用户会阻塞，因为需要等待上一个用户完成请求

非阻塞IO，单线程下，非阻塞模式
          多个用户请求，单线程下循环接收，看哪个用户发数据了，比如有100个用户，5个用户发数据了，95个没有发
          线程循环receive，
          有数据的，内核将数据拷贝到用户内存，用户接收数据，这种情况下，时间损耗在(内核将数据拷贝到用户内存的过程，如果数据大的话）
          没有数据的也不会卡主，继续循环接收

多路复用IO，就是我们说的 select, poll, epoll，也成为 事件驱动方式的IO，   event  driven  io
         当用户进程调用了select, 整个进程被block，内核就会"监听"这所有的socket, 当任何一个socket 准备好了之后，select就会返回
         select就会返回，用户进程调用read将数据从 内核拷贝到 用户进程的内存
         就是单线程下，一个进程，可以管理多个socket 连接（多任务）
         select 直接传递多个socket句柄给内核，告诉内核去监听这一批socket，如果这些连接有一个数据发过来了，就返回数据
         然后再去receive，从内核把数据拷贝到用户进程的内存
         (阻塞IO是一个socket,多路复用IO是多个socket)
         多路IO复用的等待时间 发生在用户接收数据过程中,内核数据拷贝到用户进程内存的过程

异步IO，由内核去处理用户请求的数据，然后再把用户数据拷贝到用户内存之后
        再通知用户，用户接收结果(整个过程用户不会卡）

        例如用户去银行办卡，单子提交了，留给银行一个手机号，用户不需要关注什么时间完成，可以去干别的工作
        然后银行完成整个流程了，然后快递给用户，用户在整个过程中无需等待，只需要在得到通知后，去拿结果

        异步I/O的过程：
        其实就是用户发请求，然后就不管了，干别的事情去，然后有内核帮助用户去等待数据返回，内核接到客户端发来的数据，并且
        帮助用户把数据从内核copy到用户进程后，这个时候，内核才会给用户发送信号，通知用户数据准备好了，用户直接获取数据


同步IO ，阻塞IO， 非阻塞IO，多路复用IO都属于同步IO
       同步IO操作导致请求阻塞住，直到IO操作完成，就是同步IO
       阻塞有2个地方，一个是内核等到数据的过程，另外一个就是数据从内核拷贝到用户内存的过程
                       阻塞IO ，卡在  等待数据过程
                       非阻塞IO和多路复用IO，卡在数据从内核拷贝到用户进程内存的过程

异步IO
      异步IO不会导致请求的进程block
      异步IO 既不会卡在等待数据过程，也不会卡在数据从内核拷贝到用户的过程


