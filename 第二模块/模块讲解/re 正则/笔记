

re.match 从头开始匹配


'.'     默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行
'^'     匹配字符开头，若指定flags MULTILINE,这种也可以匹配上(r"^a","\nabc\neee",flags=re.MULTILINE)
'$'     匹配字符结尾，或e.search("foo$","bfoo\nsdfsf",flags=re.MULTILINE).group()也可以
'*'     匹配*号前的字符0次或多次，re.findall("ab*","cabb3abcbbac")  结果为['abb', 'ab', 'a']
'+'     匹配前一个字符1次或多次，re.findall("ab+","ab+cd+abb+bba") 结果['ab', 'abb']
'?'     匹配前一个字符1次或0次
'{m}'   匹配前一个字符m次
'{n,m}' 匹配前一个字符n到m次，re.findall("ab{1,3}","abb abc abbcbbb") 结果'abb', 'ab', 'abb']
'|'     匹配|左或|右的字符，re.search("abc|ABC","ABCBabcCD").group() 结果'ABC'
'(...)' 分组匹配，re.search("(abc){2}a(123|456)c", "abcabca456c").group() 结果 abcabca456c


'\A'    只从字符开头匹配，re.search("\Aabc","alexabc") 是匹配不到的
'\Z'    匹配字符结尾，同$
'\d'    匹配数字0-9
'\D'    匹配非数字
'\w'    匹配[A-Za-z0-9]
\w? 可以匹配到空
\w+ 匹配字母或数字 一次或多次
'\W'    匹配非[A-Za-z0-9]
's'     匹配空白字符、\t、\n、\r , re.search("\s+","ab\tc1\n3").group() 结果 '\t'

'(?P<name>...)' 分组匹配 re.search("(?P<province>[0-9]{4})(?P<city>[0-9]{2})(?P<birthday>[0-9]{4})","371481199306143242").groupdict("city") 结果{'province': '3714', 'city': '81', 'birthday': '1993'}


最常用的匹配语法


re.match 从头开始匹配
re.search 匹配包含
re.findall 把所有匹配到的字符放到以列表中的元素返回
re.splitall 以匹配到的字符当做列表分隔符
re.sub      匹配字符并替换

反斜杠的困扰
与大多数编程语言相同，正则表达式里使用"\"作为转义字符，
这就可能造成反斜杠困扰。假如你需要匹配文本中的字符"\"，
那么使用编程语言表示的正则表达式里将需要4个反斜杠"\\\\"：前两个和后两个分别用于在编程语言里转义成反斜杠，
转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，
这个例子中的正则表达式可以使用r"\\"表示。同样，匹配一个数字的"\\d"可以写成r"\d"。
有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观

仅需轻轻知道的几个匹配模式


1.re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）
2.M(MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）
3.S(DOTALL): 点任意匹配模式，改变'.'的行为



1.正则表达式处理用户输入字符串
　　这里我不会讲正则表达式具体的用法，要将的话都可以讲一本书了，我只讲本文用到的正则表达式。根据需求，我们需要提取出用户输入字符串中的数字和运算符到一个列表中，而空格将会被忽略掉，假设用户输入的表达式是 expression，我们可以写出下面的代码：

1
2
3
4
import re
expression='(( 100 + 40 )*5/2- 3*2* 2/4+9)*((( 3 + 4)-4)-4)'
l=re.findall('([\d\.]+|/|-|\+|\*)',expression)
print(l) #['100', '+', '40', '*', '5', '/', '2', '-', '3', '*', '2', '*', '2', '/', '4', '+', '9', '*', '3', '+', '4', '-', '4', '-', '4']　
首先我们先看一下 findall 的用法，findall可以匹配所有符合规律的内容，返回包含结果的列表。'([\d\.]+|/|-|\+|\*)'是匹配规则，
这里\d表示匹配一个数字，\.表示将.转义成数字上小数点 . ，不然在正则表达式里 . 可以匹配除了换行符以外的任意字符。
[\d\.]+表示可以匹配至少由一个数字、或者小数点 . 组成的字符串，比如说，这里既可以匹配到100，也可以匹配到100.11。
|/|-|\+|\* 表示匹配到+或-或*或/，()表示一组，这里意思是如果匹配到数字或者+或者-或者*或者/其中任意一个的话，
就将其作为一组，然后添加到列表中去。